name: Publish
on: workflow_dispatch


concurrency:
  group: publish-${{ github.ref }}


env:
  WORKSPACE_ARCHIVE: workspace.tar
  WORKSPACE_ARTIFACT: build-results


jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"

      - name: Yarn build
        run: yarn build

      - name: Tar files
        run: tar -cvf ${{ env.WORKSPACE_ARCHIVE }} .

      - uses: actions/upload-artifact@v3
        with:
          name: ${{ env.WORKSPACE_ARTIFACT }}
          path: ${{ env.WORKSPACE_ARCHIVE }}
          retention-days: 1


  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"
          cache: "yarn"

      - name: Yarn test
        run: yarn test


  publish:
    name: Publish
    needs: ["build", "test"]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.WORKSPACE_ARTIFACT }}
          path: .

      - name: Untar
        run: |
          tar -xvf ${{ env.WORKSPACE_ARCHIVE }}
          rm ${{ env.WORKSPACE_ARCHIVE }}

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"
          cache: "yarn"

      - run: |
          VERSION=`npm pkg get version`
          VERSION=`sed -e 's/^"//' -e 's/"$//' <<<"$VERSION"`
          echo RELEASE_VERSION=$VERSION >> $GITHUB_ENV
          echo "RELEASE_VERSION_MAJOR=v${VERSION%%.*}" >> $GITHUB_ENV

      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ env.RELEASE_VERSION_MAJOR }}
          path: "release"
        id: checkoutrelease
        continue-on-error: true

      - uses: actions/checkout@v4
        if: steps.checkoutrelease.outcome != 'success'
        with:
          path: "release"

      - name: Commit and push release
        run: |
          pushd .
          cd release
          git restore --source=origin/master -SW .
          cp -a ../actions/. .
          git add *
          cp -a ../dist/. dist
          git add -f dist/**
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config user.name "github-actions[bot]"
          git commit -m "Release $RELEASE_VERSION"
          git tag v$RELEASE_VERSION
          git push -u origin HEAD:$RELEASE_VERSION_MAJOR --tags
          popd


  # So, what's happening here?
  #
  # Basically, restoring the workspace state between jobs is incredibly annoying.
  # We can get reasonable support by using the upload-/download-artifact
  # actions, but they suffer from a severe limitation:
  # GH Actions has a storage limit and the minimum retention is 24 hours...
  #
  # Since the storage quota is limited, we have to make sure that the artifact
  # is removed. Unfortunately, there is no official way to do this, so we resort
  # to a third party action for now.
  #
  # See also: https://github.com/actions/upload-artifact/issues/290
  cleanup:
    name: Cleanup
    if: ${{ always() }}
    needs: publish
    runs-on: ubuntu-latest
    steps:
      - name: Cleanup
        uses: GeekyEggo/delete-artifact@54ab544f12cdb7b71613a16a2b5a37a9ade990af
        with:
          name: ${{ env.workspace_artifact }}